/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package cafe;

import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.ButtonModel;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author sd_tutor19
 */
public class SandrasCafeFrame extends javax.swing.JFrame {

    /* Global variables */
    private boolean appendToFile; // true: yes, false: no.
    
    /**
     * Creates new form SandrasCafeFrame
     */
    public SandrasCafeFrame() {        
        initComponents();
        /* Asks to select the first item (breakfast) in the combobox 
        and this will cause the Click event to happen, executing the 
        cmbMealTypeActionPerformed() method below.   */
        cmbMealType.setSelectedIndex(0);
        
        /* Select the append to file radio button. Calling doClick() will
         fire an Action Event and therefore the 
         fileWriteModeRadioButtonClicked() method will execute below 
        */
        rbAppendToFile.doClick();
        
        /* Assigning an action command to a components is just like 
        sticking a badge on each one, it assigns a String to each
        component. This String is retrieved behind the Order button. */ 
        rbTea.setActionCommand("tea");
        rbCoffee.setActionCommand("coffee");
        rbCoke.setActionCommand("coke");
        rbOrange.setActionCommand("orange");
        rbWater.setActionCommand("water");   
        
        /* To get the panel on every frame, use the following code: */
        this.getContentPane();  // returns a Panel
        /* To get all the components in panel on this frame and loop through
        them: */
        for (Component c : this.getContentPane().getComponents()) {
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupDrinks = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        rbTea = new javax.swing.JRadioButton();
        rbCoffee = new javax.swing.JRadioButton();
        rbCoke = new javax.swing.JRadioButton();
        rbOrange = new javax.swing.JRadioButton();
        rbWater = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        btnPlaceOrder = new javax.swing.JButton();
        pnlExtras = new javax.swing.JPanel();
        cbKetchup = new javax.swing.JCheckBox();
        cbButter = new javax.swing.JCheckBox();
        cbMayo = new javax.swing.JCheckBox();
        cbVinegar = new javax.swing.JCheckBox();
        cmbMealType = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstOptions = new javax.swing.JList();
        btnSaveToFile = new javax.swing.JButton();
        btnLoadFromFile = new javax.swing.JButton();
        btnResetForm = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        rbOverwrite = new javax.swing.JRadioButton();
        rbAppendToFile = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Sandra's Caf√©");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("Meal Type");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("Options");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 255));
        jLabel4.setText("Drink");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 255));
        jLabel5.setText("Extras");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/breakfast.png"))); // NOI18N
        jLabel6.setPreferredSize(new java.awt.Dimension(92, 77));

        buttonGroupDrinks.add(rbTea);
        rbTea.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbTea.setText("Tea");

        buttonGroupDrinks.add(rbCoffee);
        rbCoffee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbCoffee.setText("Coffee");

        buttonGroupDrinks.add(rbCoke);
        rbCoke.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbCoke.setText("Coke");

        buttonGroupDrinks.add(rbOrange);
        rbOrange.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbOrange.setText("Orange");

        buttonGroupDrinks.add(rbWater);
        rbWater.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbWater.setText("Water");

        txtArea.setColumns(20);
        txtArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtArea.setLineWrap(true);
        txtArea.setRows(5);
        txtArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtArea);

        btnPlaceOrder.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnPlaceOrder.setText("Place Order");
        btnPlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceOrderActionPerformed(evt);
            }
        });

        cbKetchup.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbKetchup.setText("Ketchup");

        cbButter.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbButter.setText("Butter");

        cbMayo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbMayo.setText("Mayo");

        cbVinegar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbVinegar.setText("Vinegar");

        javax.swing.GroupLayout pnlExtrasLayout = new javax.swing.GroupLayout(pnlExtras);
        pnlExtras.setLayout(pnlExtrasLayout);
        pnlExtrasLayout.setHorizontalGroup(
            pnlExtrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlExtrasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlExtrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbButter)
                    .addComponent(cbMayo)
                    .addComponent(cbKetchup)
                    .addComponent(cbVinegar))
                .addContainerGap())
        );
        pnlExtrasLayout.setVerticalGroup(
            pnlExtrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlExtrasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbButter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbMayo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbKetchup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbVinegar)
                .addContainerGap())
        );

        cmbMealType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Breakfast", "Lunch", "Dinner" }));
        cmbMealType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMealTypeActionPerformed(evt);
            }
        });

        lstOptions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstOptions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstOptionsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstOptions);

        btnSaveToFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSaveToFile.setText("Save to File");
        btnSaveToFile.setEnabled(false);
        btnSaveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveToFileActionPerformed(evt);
            }
        });

        btnLoadFromFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnLoadFromFile.setText("Load from File");
        btnLoadFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadFromFileActionPerformed(evt);
            }
        });

        btnResetForm.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnResetForm.setText("Reset Form");
        btnResetForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFormActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("File Write Mode"));

        buttonGroup1.add(rbOverwrite);
        rbOverwrite.setText("Overwrite");
        rbOverwrite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileWriteModeRadioButtonClicked(evt);
            }
        });

        buttonGroup1.add(rbAppendToFile);
        rbAppendToFile.setSelected(true);
        rbAppendToFile.setText("Append To File");
        rbAppendToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileWriteModeRadioButtonClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbAppendToFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbOverwrite, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbAppendToFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbOverwrite)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(cmbMealType, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbTea)
                                    .addComponent(rbCoffee)
                                    .addComponent(rbCoke)
                                    .addComponent(rbOrange)
                                    .addComponent(rbWater)
                                    .addComponent(jLabel4))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(pnlExtras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnLoadFromFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSaveToFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnPlaceOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnResetForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(28, 28, 28)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 27, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbMealType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbTea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbCoffee)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbCoke)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbOrange)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbWater))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlExtras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPlaceOrder)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSaveToFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLoadFromFile))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnResetForm))
                    .addComponent(jScrollPane1))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceOrderActionPerformed

        // Enable the Save to File button once an order has been placed
        btnSaveToFile.setEnabled(true);
        
        String order = "";
        
        /* Get the options selected from the list. 
        .getSelectedValuesList() will return a list of the items 
        selected, e.g. [Sausages, onions, bacon] */
        String options = lstOptions.getSelectedValuesList()
                            .toString().toLowerCase();
        
        /* Substring the options to remove the square brackets and 
        add on a comma at the end. */
        order += options.substring(1, options.length() - 1);
        
        /* buttonGroupDrinks.getSelection() will return a 
        ButtonModel object which can be used to manage the state
        of buttons, radio buttons or check boxes. I can retrieve
        the Action Command associated with the radio button that
        was pressed. I have 5 lines of code in the constructor
        to set an action command for each radiobutton. */
        ButtonModel model = buttonGroupDrinks.getSelection();
        // model will be null if no drink is selected
        if (model != null) {
            order += ", ";
            order += model.getActionCommand();      
        }
        
        //        or
        
//        if (rbCoffee.isSelected())
//            order += "coffee";
//        else if (rbCoke.isSelected())
//            order += "coke";
//        else if (rbOrange.isSelected())
//            order += "orange";
//        else if (rbTea.isSelected())
//            order += "tea";
//        else 
//            order += "water";
            
//        if (cbButter.isSelected())
//            order += " and butter";
//        if (cbKetchup.isSelected())
//            order += " and ketchup";
//        if (cbMayo.isSelected())
//            order += " and mayo";
//        if (cbVinegar.isSelected())
//            order += " and vinegar";
        
        /* pnlExtras.getComponents() will return a Component
        array containing the Checkbox objects in that panel.
        I can then loop through that array. 
        */
        Component [] allCheckBoxes = pnlExtras.getComponents();
        /* Loop through all components in that panel */
        for (Component c : allCheckBoxes) {
            // Cast c down from a Component to a JCheckBox so
            // I can call Checkbox methods 
            JCheckBox cb = ((JCheckBox)c);
            if (cb.isSelected()) { // If the checkbox is checked
                // Get its text and add it onto the order
                order += " and " + cb.getText().toLowerCase();
            }
        }        
        // If the order String is empty show a message
        if (order.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please choose something");
        } else {
            txtArea.setText("You ordered " + order + ".");
        }
    }//GEN-LAST:event_btnPlaceOrderActionPerformed

    private void cmbMealTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMealTypeActionPerformed
        // Get the string selected in the combo box
        String mealSelected = cmbMealType.getSelectedItem().toString();
        
        /* To add items into a JList, you must first add each item/ String
        into a Model, i.e. a DefaultListModel. When this is done you
        can assign the model to the list: lstOptions.setModel(model);
        */
        DefaultListModel<String> model = new DefaultListModel<>();

        /* if its breakfast, add breakfast stuff to the list
           if its lunch, add lunch stuff to the list
           if its dinner, add dinner stuff to the list :
        */
        switch(mealSelected) {
            case "Breakfast":
                model.addElement("Sausages");
                model.addElement("Bacon");
                model.addElement("Onions");
                model.addElement("Mushrooms");
                model.addElement("Hashbrown");
                model.addElement("Beans");
                model.addElement("Toast");
                model.addElement("Fried Egg");
                model.addElement("Poached Egg");
                model.addElement("Scrambled Egg");
                break;
            case "Lunch":
                model.addElement("Sandwich");
                model.addElement("Soup");
                model.addElement("Chips");
                model.addElement("Salad");
                model.addElement("Crisps");
                model.addElement("Wrap");
                break;
            case "Dinner":
                model.addElement("Mashed Potatoe");
                model.addElement("Braised Steak");
                model.addElement("Chicken Wrap");
                model.addElement("Chips");
                model.addElement("Vegetables");
                model.addElement("Gravy");
                break;
            default: // always program a default even if it'll never happen
                model.addElement("Choose Meal Type");
        }
        lstOptions.setModel(model); // loads the model into the Options List
    }//GEN-LAST:event_cmbMealTypeActionPerformed

    private void btnSaveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveToFileActionPerformed
        // Make sure there is text in the Text Area
        if(txtArea.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please place an order");
            
        } else { // write the order out to file            
           /* One of the FileWriter's constructors take two parameters,
            one is a File object specifing the filename and the second
            is where to append or overwrite to the file: 
            true : append
            false: overwrite 
            If you just want to overwrite everytime, use the following code:
             
                    try (PrintWriter bw = new PrintWriter("order.txt")) {   */
            
           /* This is a File Chooser Dialog to allow the user to choose
            a filename to save as... */
            JFileChooser chooser = new JFileChooser();
            
            /* To open the dialog: 
               chooser.showDialog(parentComp, "Title text") */
            if (chooser.showDialog(this, "OK") == 
                    JFileChooser.APPROVE_OPTION) { // if OK was pressed
                // Get the filename typed/ chosen by the user
                File filename = chooser.getSelectedFile();
                
                                      // filename from the chooser
                try (FileWriter fw = new FileWriter(filename, appendToFile);
                        PrintWriter pw = new PrintWriter(fw)) {

                    // write the contents of the text area to file 
                    pw.println(txtArea.getText());
                    JOptionPane.showMessageDialog(this, "Order written to file");
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Unable to create file");
                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Unable to create file");
                }
            }
        }
    }//GEN-LAST:event_btnSaveToFileActionPerformed

    private void btnLoadFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadFromFileActionPerformed
        /* A BufferedReader is used to read from a file, you need to 
        pass a FileReader into its constructor. Both objects are declared
        in the try-with-resource parenthesis. Both resources will be
        closed at the end of the try block. */
        
        /* This is a File Chooser Dialog to allow the user to choose
            a filename to load from */
        JFileChooser chooser = new JFileChooser();
        
        /* chooser.showDialog() opens the dialog. You must check if the
        user clicked the 'approve'/ ok button */
        if (chooser.showDialog(this, "OK") == JFileChooser.APPROVE_OPTION) {
            
            /* chooser.getSelectedFile(); will retrieve the file the
            user choose */
            File filename = chooser.getSelectedFile();
            /* Pass the filename into the FileReader constructor. */
            try (FileReader fr = new FileReader(filename);
                    BufferedReader br = new BufferedReader(fr)) {

                String line = "";           // Stores a line from the file
                String wholeFile = "";      // Stores each line from the
                                            // whole file

                /* br.readLine() reads a line of text from the file and 
                assigned it to 'line'.  readline() will return null when
                the end of file is reached, therefore it is checked in the
                condition to make sure it is not null. */
                while ( (line = br.readLine()) != null) {
                    //txtArea.setText(line);
                    /* Concat 'line' onto the 'wholeline' */
                    wholeFile += line + "\n"; 
                }

                // Add the wholeFile to the textArea once its not empty
                if (wholeFile.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "File is empty");
                } else {
                    txtArea.setText(wholeFile);
                }

            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "File could not be opened");
            }
        }
    }//GEN-LAST:event_btnLoadFromFileActionPerformed

    private void btnResetFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFormActionPerformed
       // Clear this frame from memory
       this.dispose();  
       // Create a new frame in memory, everything will be reset 
       new SandrasCafeFrame().setVisible(true);
    }//GEN-LAST:event_btnResetFormActionPerformed

    /*
     * This method handles either the append To file radiobutton or
     * the Overwrite radiobutton.
     */
    private void fileWriteModeRadioButtonClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileWriteModeRadioButtonClicked
        // If the Append To File radiobutton is selected, then assign
        // true to the global variable appendToFile.  This variable is
        // used behind the 'Save To File' button in constructing the
        // FileReader object
        if (rbAppendToFile.isSelected())   
             appendToFile = true;
         else 
             appendToFile = false;
    }//GEN-LAST:event_fileWriteModeRadioButtonClicked

    private void lstOptionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstOptionsValueChanged
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>();
        
        cmbMealType.setModel(model);
    }//GEN-LAST:event_lstOptionsValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SandrasCafeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SandrasCafeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SandrasCafeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SandrasCafeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SandrasCafeFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoadFromFile;
    private javax.swing.JButton btnPlaceOrder;
    private javax.swing.JButton btnResetForm;
    private javax.swing.JButton btnSaveToFile;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroupDrinks;
    private javax.swing.JCheckBox cbButter;
    private javax.swing.JCheckBox cbKetchup;
    private javax.swing.JCheckBox cbMayo;
    private javax.swing.JCheckBox cbVinegar;
    private javax.swing.JComboBox cmbMealType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstOptions;
    private javax.swing.JPanel pnlExtras;
    private javax.swing.JRadioButton rbAppendToFile;
    private javax.swing.JRadioButton rbCoffee;
    private javax.swing.JRadioButton rbCoke;
    private javax.swing.JRadioButton rbOrange;
    private javax.swing.JRadioButton rbOverwrite;
    private javax.swing.JRadioButton rbTea;
    private javax.swing.JRadioButton rbWater;
    private javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables
}
